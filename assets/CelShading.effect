
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 
              - 300.0
              - 300.0
          uColorLevels: 
            value: 6.0
          uEdge: 
            value: 0.5
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec2 uSize;
		float uColorLevels;
		float uEdge;
	};
	uniform sampler2D uTex;

    vec4 edgeFilter(sampler2D tex, vec2 uv, int px, int py, vec2 resolution)
	{
	    vec4 sum = vec4(0.0);
	    for (int y = -3; y <= 3; ++y) {
	        for (int x = -3; x <= 3; ++x) {
	            sum += texture2D(tex, uv + vec2(px + x, py + y) / resolution);
	       }
	    }
	    sum /= float((2 * 3 + 1) * (2 * 3 + 1));
	    return sum;
	}
	vec4 CelShading_main(sampler2D Tex, vec2 UV, vec2 Size, float ColorLevels, float Edge) 
	{
	    vec4 color = edgeFilter(Tex, UV, 0, 0, Size);
	    for (int c = 0; c < 3; ++c) {
	        color[c] = floor(ColorLevels * color[c]) / ColorLevels;
	    }
	    vec4 sum = abs(edgeFilter(Tex, UV, 0, 1, Size) - edgeFilter(Tex, UV, 0, -1, Size));
	    sum += abs(edgeFilter(Tex, UV, 1, 0, Size) - edgeFilter(Tex, UV, -1, 0, Size));
	    sum /= 2.0;
	    if (length(sum) > Edge) {
	        color.rgb = vec3(0.0);
	    }
	    return color;
	}
	void main () {
	    gl_FragColor = CelShading_main(texture, v_uv0, uSize, uColorLevels, uEdge);
	} 
	
}%
        