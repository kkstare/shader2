{
  "ver": "1.0.27",
  "uuid": "72631548-6832-4168-8708-a4c0a1718a84",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec2 uSize;\nuniform float uColorLevels;\nuniform float uEdge;\nuniform sampler2D uTex;\n  vec4 edgeFilter(sampler2D tex, vec2 uv, int px, int py, vec2 resolution)\n{\n    vec4 sum = vec4(0.0);\n    for (int y = -3; y <= 3; ++y) {\n        for (int x = -3; x <= 3; ++x) {\n            sum += texture2D(tex, uv + vec2(px + x, py + y) / resolution);\n       }\n    }\n    sum /= float((2 * 3 + 1) * (2 * 3 + 1));\n    return sum;\n}\nvec4 CelShading_main(sampler2D Tex, vec2 UV, vec2 Size, float ColorLevels, float Edge)\n{\n    vec4 color = edgeFilter(Tex, UV, 0, 0, Size);\n    for (int c = 0; c < 3; ++c) {\n        color[c] = floor(ColorLevels * color[c]) / ColorLevels;\n    }\n    vec4 sum = abs(edgeFilter(Tex, UV, 0, 1, Size) - edgeFilter(Tex, UV, 0, -1, Size));\n    sum += abs(edgeFilter(Tex, UV, 1, 0, Size) - edgeFilter(Tex, UV, -1, 0, Size));\n    sum /= 2.0;\n    if (length(sum) > Edge) {\n        color.rgb = vec3(0.0);\n    }\n    return color;\n}\nvoid main () {\n    gl_FragColor = CelShading_main(texture, v_uv0, uSize, uColorLevels, uEdge);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec2 uSize;\n  float uColorLevels;\n  float uEdge;\n};\nuniform sampler2D uTex;\n  vec4 edgeFilter(sampler2D tex, vec2 uv, int px, int py, vec2 resolution)\n{\n    vec4 sum = vec4(0.0);\n    for (int y = -3; y <= 3; ++y) {\n        for (int x = -3; x <= 3; ++x) {\n            sum += texture2D(tex, uv + vec2(px + x, py + y) / resolution);\n       }\n    }\n    sum /= float((2 * 3 + 1) * (2 * 3 + 1));\n    return sum;\n}\nvec4 CelShading_main(sampler2D Tex, vec2 UV, vec2 Size, float ColorLevels, float Edge)\n{\n    vec4 color = edgeFilter(Tex, UV, 0, 0, Size);\n    for (int c = 0; c < 3; ++c) {\n        color[c] = floor(ColorLevels * color[c]) / ColorLevels;\n    }\n    vec4 sum = abs(edgeFilter(Tex, UV, 0, 1, Size) - edgeFilter(Tex, UV, 0, -1, Size));\n    sum += abs(edgeFilter(Tex, UV, 1, 0, Size) - edgeFilter(Tex, UV, -1, 0, Size));\n    sum /= 2.0;\n    if (length(sum) > Edge) {\n        color.rgb = vec3(0.0);\n    }\n    return color;\n}\nvoid main () {\n    gl_FragColor = CelShading_main(texture, v_uv0, uSize, uColorLevels, uEdge);\n}"
      }
    }
  ],
  "subMetas": {}
}