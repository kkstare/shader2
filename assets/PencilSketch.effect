
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 
              - 300.0
              - 300.0
          uIntensity: 
            value: 1.3
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec2 uSize;
		float uIntensity;
	};
	uniform sampler2D uTex;

    
	vec4 PencilSketch_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity) 
	{
	    vec2 offset = vec2(1.0 / Size);
	    vec3 weight = vec3(0.1125, 0.3154, 0.0721);
	    vec3 texColor = texture2D(Tex, UV).rgb;
	    vec2 stp0 = vec2(offset.x, 0.0);
	    vec2 st0p = vec2(0.0, offset.y);
	    vec2 stpp = vec2(offset.x, offset.y);
	    vec2 stpm = vec2(offset.x, -offset.y);
	    float i00 = dot(texColor, weight);
	    float im1m1 = dot(texture2D(Tex, UV - stpp).rgb, weight);
	    float ip1p1 = dot(texture2D(Tex, UV + stpp).rgb, weight);
	    float im1p1 = dot(texture2D(Tex, UV - stpm).rgb, weight);
	    float ip1m1 = dot(texture2D(Tex, UV + stpm).rgb, weight);
	    float im10 = dot(texture2D(Tex, UV - stp0).rgb, weight);
	    float ip10 = dot(texture2D(Tex, UV + stp0).rgb, weight);
	    float i0m1 = dot(texture2D(Tex, UV - st0p).rgb, weight);
	    float i0p1 = dot(texture2D(Tex, UV + st0p).rgb, weight);
	    float h = -im1p1 - 2.0 * i0p1 - ip1p1 + im1m1 + 2.0 * i0m1 + ip1m1;
	    float v = -im1m1 - 2.0 * im10 - im1p1 + ip1m1 + 2.0 * ip10 + ip1p1;
	    float mag = 1.0 - length(vec2(h, v));
	    vec3 target = vec3(mag);
	    return vec4(mix(texColor, target, Intensity), texture2D(Tex, UV).a);
	}
	    
	void main () {
	    gl_FragColor = PencilSketch_main(texture, v_uv0, uSize, uIntensity);
	} 
	
}%
        