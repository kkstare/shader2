{
  "ver": "1.0.27",
  "uuid": "8436d659-12e2-4b56-b601-92d590818c4c",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform vec4 cc_time;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform float uSpeed;\nuniform sampler2D uTex;\n  vec3 N13(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(0.1031, 0.11369, 0.13787));\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\n}\nfloat N15(float t)\n{\n    return fract(sin(t * 12345.564) * 7658.76);\n}\nfloat Saw(float b, float t)\n{\n    return smoothstep(0.0, b, t) * smoothstep(1.0, b, t);\n}\nvec2 dropLayer(vec2 uv, float t)\n{\n    vec2 UV = uv;\n    uv.y += t * 0.75;\n    vec2 a = vec2(6.0, 1.0);\n    vec2 grid = a *2.0;\n    vec2 id = floor(uv * grid);\n    float colShift = N15(id.x);\n    uv.y += colShift;\n    id = floor(uv * grid);\n    vec3 n = N13(id.x * 35.2 + id.y * 2376.1);\n    vec2 st = fract(uv * grid) - vec2(0.5, 0);\n    float x = n.x - 0.5;\n    float y = UV.y * 20.0;\n    float wiggle = sin(y + sin(y));\n    x += wiggle * (0.5 - abs(x)) * (n.z - 0.5);\n    x *= 0.7;\n    float ti = fract(t + n.z);\n    y = (Saw(0.85, ti) - 0.5) * 0.9 + 0.5;\n    vec2 p = vec2(x, y);\n    float d = length((st-p) * a.yx);\n    float mainDrop = smoothstep(0.4, 0.0, d);\n    float r = sqrt(smoothstep(1.0, y, st.y));\n    float cd = abs(st.x - x);\n    float trail = smoothstep(0.23 * r, 0.15 * r * r, cd);\n    float trailFront = smoothstep(-0.02, 0.02, st.y - y);\n    trail *= trailFront * r * r;\n    y = UV.y;\n    float trail2 = smoothstep(0.2 * r, 0.0, cd);\n    float droplets = max(0.0, (sin(y * (1.0 - y) * 120.0) - st.y)) * trail2 * trailFront * n.z;\n    y = fract(y * 10.0) + (st.y - 0.5);\n    float dd = length(st - vec2(x, y));\n    droplets = smoothstep(0.3, 0.0, dd);\n    float m = mainDrop + droplets * r * trailFront;\n    return vec2(m, trail);\n}\nfloat StaticDrops(vec2 uv, float t)\n{\n    uv *= 40.;\n    vec2 id = floor(uv);\n    uv = fract(uv) - 0.5;\n    vec3 n = N13(id.x * 107.45 + id.y * 3543.654);\n    vec2 p = (n.xy - 0.5) * 0.7;\n    float d = length(uv-p);\n    float fade = Saw(0.025, fract(t + n.z));\n    float c = smoothstep(0.3, 0.0, d) * fract(n.z * 10.0) * fade;\n    return c;\n}\nvec2 Drops(vec2 uv, float t, float l0, float l1, float l2)\n{\n    float s = StaticDrops(uv, t) * l0;\n    vec2 m1 = dropLayer(uv, t) * l1;\n    vec2 m2 = dropLayer(vec2(0.0), t) * l2;\n    float c = s + m1.x + m2.x;\n    c = smoothstep(.3, 1.0, c);\n    return vec2(c, max(m1.y * l0, m2.y * l1));\n}\nvec4 RainDrop_main(sampler2D Tex, vec2 UV, float Seed, float Speed)\n{\n    float T = Seed * Speed;\n    float t = T*.5 * -1.0;\n    float rainAmount =  3.076;\n    float maxBlur = mix(3., 6., rainAmount);\n    float minBlur = 1.216;\n    float staticDrops = smoothstep(-.5, 1., rainAmount)*0.5;\n    float layer1 = smoothstep(.25, .75, rainAmount);\n    float layer2 = smoothstep(.0, .5, rainAmount);\n    vec2 c = Drops(UV, t, staticDrops, layer1, layer2);\n    vec2 e = vec2(.001, 0.);\n    float cx = Drops(UV + e, t, staticDrops, layer1, layer2).x;\n    float cy = Drops(UV + e.yx, t, staticDrops, layer1, layer2).x;\n    vec2 n = vec2(cx - c.x, cy - c.x);\n    float focus = mix(maxBlur - c.y, minBlur, smoothstep(0.0, 0.0, c.x));\n    vec3 col = texture2D(Tex, UV + n, focus).rgb;\n    float colFade = sin(t*.2)*.5+.5;\n    col *= mix(vec3(1.), vec3(.8, .9, 1.3), 0.0);\n    return vec4(col, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = RainDrop_main(texture, v_uv0, cc_time[0], uSpeed);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  float uSpeed;\n};\nuniform sampler2D uTex;\n  vec3 N13(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(0.1031, 0.11369, 0.13787));\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\n}\nfloat N15(float t)\n{\n    return fract(sin(t * 12345.564) * 7658.76);\n}\nfloat Saw(float b, float t)\n{\n    return smoothstep(0.0, b, t) * smoothstep(1.0, b, t);\n}\nvec2 dropLayer(vec2 uv, float t)\n{\n    vec2 UV = uv;\n    uv.y += t * 0.75;\n    vec2 a = vec2(6.0, 1.0);\n    vec2 grid = a *2.0;\n    vec2 id = floor(uv * grid);\n    float colShift = N15(id.x);\n    uv.y += colShift;\n    id = floor(uv * grid);\n    vec3 n = N13(id.x * 35.2 + id.y * 2376.1);\n    vec2 st = fract(uv * grid) - vec2(0.5, 0);\n    float x = n.x - 0.5;\n    float y = UV.y * 20.0;\n    float wiggle = sin(y + sin(y));\n    x += wiggle * (0.5 - abs(x)) * (n.z - 0.5);\n    x *= 0.7;\n    float ti = fract(t + n.z);\n    y = (Saw(0.85, ti) - 0.5) * 0.9 + 0.5;\n    vec2 p = vec2(x, y);\n    float d = length((st-p) * a.yx);\n    float mainDrop = smoothstep(0.4, 0.0, d);\n    float r = sqrt(smoothstep(1.0, y, st.y));\n    float cd = abs(st.x - x);\n    float trail = smoothstep(0.23 * r, 0.15 * r * r, cd);\n    float trailFront = smoothstep(-0.02, 0.02, st.y - y);\n    trail *= trailFront * r * r;\n    y = UV.y;\n    float trail2 = smoothstep(0.2 * r, 0.0, cd);\n    float droplets = max(0.0, (sin(y * (1.0 - y) * 120.0) - st.y)) * trail2 * trailFront * n.z;\n    y = fract(y * 10.0) + (st.y - 0.5);\n    float dd = length(st - vec2(x, y));\n    droplets = smoothstep(0.3, 0.0, dd);\n    float m = mainDrop + droplets * r * trailFront;\n    return vec2(m, trail);\n}\nfloat StaticDrops(vec2 uv, float t)\n{\n    uv *= 40.;\n    vec2 id = floor(uv);\n    uv = fract(uv) - 0.5;\n    vec3 n = N13(id.x * 107.45 + id.y * 3543.654);\n    vec2 p = (n.xy - 0.5) * 0.7;\n    float d = length(uv-p);\n    float fade = Saw(0.025, fract(t + n.z));\n    float c = smoothstep(0.3, 0.0, d) * fract(n.z * 10.0) * fade;\n    return c;\n}\nvec2 Drops(vec2 uv, float t, float l0, float l1, float l2)\n{\n    float s = StaticDrops(uv, t) * l0;\n    vec2 m1 = dropLayer(uv, t) * l1;\n    vec2 m2 = dropLayer(vec2(0.0), t) * l2;\n    float c = s + m1.x + m2.x;\n    c = smoothstep(.3, 1.0, c);\n    return vec2(c, max(m1.y * l0, m2.y * l1));\n}\nvec4 RainDrop_main(sampler2D Tex, vec2 UV, float Seed, float Speed)\n{\n    float T = Seed * Speed;\n    float t = T*.5 * -1.0;\n    float rainAmount =  3.076;\n    float maxBlur = mix(3., 6., rainAmount);\n    float minBlur = 1.216;\n    float staticDrops = smoothstep(-.5, 1., rainAmount)*0.5;\n    float layer1 = smoothstep(.25, .75, rainAmount);\n    float layer2 = smoothstep(.0, .5, rainAmount);\n    vec2 c = Drops(UV, t, staticDrops, layer1, layer2);\n    vec2 e = vec2(.001, 0.);\n    float cx = Drops(UV + e, t, staticDrops, layer1, layer2).x;\n    float cy = Drops(UV + e.yx, t, staticDrops, layer1, layer2).x;\n    vec2 n = vec2(cx - c.x, cy - c.x);\n    float focus = mix(maxBlur - c.y, minBlur, smoothstep(0.0, 0.0, c.x));\n    vec3 col = texture2D(Tex, UV + n, focus).rgb;\n    float colFade = sin(t*.2)*.5+.5;\n    col *= mix(vec3(1.), vec3(.8, .9, 1.3), 0.0);\n    return vec4(col, texture2D(Tex, UV).a);\n}\nvoid main () {\n    gl_FragColor = RainDrop_main(texture, v_uv0, cc_time[0], uSpeed);\n}"
      }
    }
  ],
  "subMetas": {}
}