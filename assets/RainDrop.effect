
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSpeed: 
            value: 0.5
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		float uSpeed;
	};
	uniform sampler2D uTex;

    vec3 N13(float p) 
	{
	   vec3 p3 = fract(vec3(p) * vec3(0.1031, 0.11369, 0.13787));
	   p3 += dot(p3, p3.yzx + 19.19);
	   return fract(vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));
	}
	vec4 N14(float t) 
	{
	    return fract(sin(t*vec4(123.0, 1024.0, 1456.0, 264.0)) * vec4(6547.0, 345.0, 8799.0, 1564.0));
	}
	float N15(float t) 
	{
	    return fract(sin(t * 12345.564) * 7658.76);
	}
	float Saw(float b, float t) 
	{
	    return smoothstep(0.0, b, t) * smoothstep(1.0, b, t);
	}
	vec2 dropLayer(vec2 uv, float t) 
	{
	    vec2 UV = uv;    
	    uv.y += t * 0.75;
	    vec2 a = vec2(6.0, 1.0);
	    vec2 grid = a *2.0;
	    vec2 id = floor(uv * grid);
	    float colShift = N15(id.x); 
	    uv.y += colShift;
	    id = floor(uv * grid);
	    vec3 n = N13(id.x * 35.2 + id.y * 2376.1);
	    vec2 st = fract(uv * grid) - vec2(0.5, 0);
	    float x = n.x - 0.5;
	    float y = UV.y * 20.0;
	    float wiggle = sin(y + sin(y));
	    x += wiggle * (0.5 - abs(x)) * (n.z - 0.5);
	    x *= 0.7;
	    float ti = fract(t + n.z);
	    y = (Saw(0.85, ti) - 0.5) * 0.9 + 0.5;
	    vec2 p = vec2(x, y);
	    float d = length((st-p) * a.yx);
	    float mainDrop = smoothstep(0.4, 0.0, d);
	    float r = sqrt(smoothstep(1.0, y, st.y));
	    float cd = abs(st.x - x);
	    float trail = smoothstep(0.23 * r, 0.15 * r * r, cd);
	    float trailFront = smoothstep(-0.02, 0.02, st.y - y);
	    trail *= trailFront * r * r;
	    y = UV.y;
	    float trail2 = smoothstep(0.2 * r, 0.0, cd);
	    float droplets = max(0.0, (sin(y * (1.0 - y) * 120.0) - st.y)) * trail2 * trailFront * n.z;
	    y = fract(y * 10.0) + (st.y - 0.5);
	    float dd = length(st - vec2(x, y));
	    droplets = smoothstep(0.3, 0.0, dd);
	    float m = mainDrop + droplets * r * trailFront;
	    return vec2(m, trail);
	}
	float StaticDrops(vec2 uv, float t) 
	{
	    uv *= 40.;    
	    vec2 id = floor(uv);
	    uv = fract(uv) - 0.5;
	    vec3 n = N13(id.x * 107.45 + id.y * 3543.654);
	    vec2 p = (n.xy - 0.5) * 0.7;
	    float d = length(uv-p);
	    float fade = Saw(0.025, fract(t + n.z));
	    float c = smoothstep(0.3, 0.0, d) * fract(n.z * 10.0) * fade;
	    return c;
	}
	vec2 Drops(vec2 uv, float t, float l0, float l1, float l2) 
	{
	    float s = StaticDrops(uv, t) * l0; 
	    vec2 m1 = dropLayer(uv, t) * l1;
	    vec2 m2 = dropLayer(vec2(0.0), t) * l2;
	    float c = s + m1.x + m2.x;
	    c = smoothstep(.3, 1.0, c);
	    return vec2(c, max(m1.y * l0, m2.y * l1));
	}
	vec4 RainDrop_main(sampler2D Tex, vec2 UV, float Seed, float Speed) 
	{
	    float T = Seed * Speed;
	    float t = T*.5 * -1.0;
	    float rainAmount =  3.076;
	    float maxBlur = mix(3., 6., rainAmount);
	    float minBlur = 1.216;
	    float staticDrops = smoothstep(-.5, 1., rainAmount)*0.5;
	    float layer1 = smoothstep(.25, .75, rainAmount);
	    float layer2 = smoothstep(.0, .5, rainAmount);
	    vec2 c = Drops(UV, t, staticDrops, layer1, layer2);
	    vec2 e = vec2(.001, 0.);
	    float cx = Drops(UV + e, t, staticDrops, layer1, layer2).x;
	    float cy = Drops(UV + e.yx, t, staticDrops, layer1, layer2).x;
	    vec2 n = vec2(cx - c.x, cy - c.x);
	    float focus = mix(maxBlur - c.y, minBlur, smoothstep(0.0, 0.0, c.x));
	    vec3 col = texture2D(Tex, UV + n, focus).rgb;
	    float colFade = sin(t*.2)*.5+.5;
	    col *= mix(vec3(1.), vec3(.8, .9, 1.3), 0.0);
	    return vec4(col, texture2D(Tex, UV).a);
	}
	void main () {
	    gl_FragColor = RainDrop_main(texture, v_uv0, cc_time[0], uSpeed);
	} 
	
}%
        