{
  "ver": "1.0.27",
  "uuid": "e481ccfa-0729-4f9f-b6ac-26ab4aadb537",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nconst float NUM_STEPS = 8.0;\nfloat PI     = 3.141592;\nfloat EPSILON  = 0.001;\nfloat SEA_HEIGHT = 0.6;\nfloat SEA_CHOPPY = 4.0;\nfloat SEA_SPEED = 0.8;\nfloat SEA_FREQ = 0.16;\nvec3 SEA_BASE = vec3(0.0,0.09,0.18);\nvec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6)*0.6;\nmat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\nmat3 fromEuler(vec3 ang) {\n  vec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n  m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n  m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n  return m;\n}\nfloat hash( vec2 p ) {\n  float h = dot(p,vec2(127.1,311.7));\n    return fract(sin(h)*43758.5453123);\n}\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n  vec2 u = f*f*(3.0-2.0*f);\n    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ),\n                    hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ),\n                    hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat diffuse(vec3 n,vec3 l,float p) {\n    return pow(dot(n,l) * 0.4 + 0.6,p);\n}\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {\n    float nrm = (s + 8.0) / (PI * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\nvec3 getSkyColor(vec3 e) {\n    e.y = (max(e.y,0.0)*0.8+0.2)*0.8;\n    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4) * 1.1;\n}\nfloat sea_octave(vec2 uv, float choppy) {\n    uv += noise(uv);\n    vec2 wv = 1.0-abs(sin(uv));\n    vec2 swv = abs(cos(uv));\n    wv = mix(wv,swv,wv);\n    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);\n}\nfloat map(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    float d, h = 0.0;\n    const float ITER_GEOMETRY = 3.0;\n    for(float i = 0.0; i < ITER_GEOMETRY; i++) {\n      d = sea_octave((uv+(1.0 + cc_time.x * SEA_SPEED))*freq,choppy);\n      d += sea_octave((uv-(1.0 + cc_time.x * SEA_SPEED))*freq,choppy);\n        h += d * amp;\n      uv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\nfloat map_detailed(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    float d, h = 0.0;\n    const float ITER_FRAGMENT = 5.0;\n    for(float i = 0.0; i < ITER_FRAGMENT; i++) {\n      d = sea_octave((uv+(1.0 + cc_time.x * SEA_SPEED))*freq,choppy);\n      d += sea_octave((uv-(1.0 + cc_time.x * SEA_SPEED))*freq,choppy);\n        h += d * amp;\n      uv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {\n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n    fresnel = pow(fresnel,3.0) * 0.5;\n    vec3 reflected = getSkyColor(reflect(eye,n));\n    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12;\n    vec3 color = mix(refracted,reflected,fresnel);\n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;\n    color += vec3(specular(n,l,eye,60.0));\n    return color;\n}\nvec3 getNormal(vec3 p, float eps) {\n    vec3 n;\n    n.y = map_detailed(p);\n    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\n    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\n    n.y = eps;\n    return normalize(n);\n}\nfloat heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {\n    float tm = 0.0;\n    float tx = 1000.0;\n    float hx = map(ori + dir * tx);\n    if(hx > 0.0) return tx;\n    float hm = map(ori + dir * tm);\n    float tmid = 0.0;\n    for(float i = 0.0; i < NUM_STEPS; i++) {\n        tmid = mix(tm,tx, hm/(hm-hx));\n        p = ori + dir * tmid;\n      float hmid = map(p);\n    if(hmid < 0.0) {\n          tx = tmid;\n            hx = hmid;\n        } else {\n            tm = tmid;\n            hm = hmid;\n        }\n    }\n    return tmid;\n}\nvec3 getPixel(in vec2 coord, float time) {\n    vec2 uv = coord / vec2(512.0,512.0).xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= vec2(512.0,512.0).x / vec2(512.0,512.0).y;\n    vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);\n    vec3 ori = vec3(0.0,3.5,time*5.0);\n    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.14;\n    dir = normalize(dir) * fromEuler(ang);\n    vec3 p;\n    heightMapTracing(ori,dir,p);\n    vec3 dist = p - ori;\n    vec3 n = getNormal(p, dot(dist,dist) * (0.1 / vec2(512.0,512.0).x));\n    vec3 light = normalize(vec3(0.0,1.0,0.8));\n    return mix(\n        getSkyColor(dir),\n        getSeaColor(p,n,light,dir,dist),\n      pow(smoothstep(0.0,-0.02,dir.y),0.2));\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  float time = cc_time.x * 0.3 ;\n  #if AA\n    vec3 color = vec3(0.0);\n    for(float i = -1.0; i <= 1.0; i++) {\n        for(float j = -1.0; j <= 1.0; j++) {\n          vec2 uv = gl_FragCoord+vec2(i,j)/3.0;\n        color += getPixel(uv, time);\n        }\n    }\n    color /= 9.0;\n  #else\n      vec3 color = getPixel(gl_FragCoord.xy, time);\n  #endif\n  gl_FragColor = vec4(pow(color,vec3(0.65)), 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nconst float NUM_STEPS = 8.0;\nfloat PI     = 3.141592;\nfloat EPSILON  = 0.001;\nfloat SEA_HEIGHT = 0.6;\nfloat SEA_CHOPPY = 4.0;\nfloat SEA_SPEED = 0.8;\nfloat SEA_FREQ = 0.16;\nvec3 SEA_BASE = vec3(0.0,0.09,0.18);\nvec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6)*0.6;\nmat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\nmat3 fromEuler(vec3 ang) {\n  vec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n  m[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n  m[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n  return m;\n}\nfloat hash( vec2 p ) {\n  float h = dot(p,vec2(127.1,311.7));\n    return fract(sin(h)*43758.5453123);\n}\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n  vec2 u = f*f*(3.0-2.0*f);\n    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ),\n                    hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ),\n                    hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat diffuse(vec3 n,vec3 l,float p) {\n    return pow(dot(n,l) * 0.4 + 0.6,p);\n}\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {\n    float nrm = (s + 8.0) / (PI * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\nvec3 getSkyColor(vec3 e) {\n    e.y = (max(e.y,0.0)*0.8+0.2)*0.8;\n    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4) * 1.1;\n}\nfloat sea_octave(vec2 uv, float choppy) {\n    uv += noise(uv);\n    vec2 wv = 1.0-abs(sin(uv));\n    vec2 swv = abs(cos(uv));\n    wv = mix(wv,swv,wv);\n    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);\n}\nfloat map(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    float d, h = 0.0;\n    const float ITER_GEOMETRY = 3.0;\n    for(float i = 0.0; i < ITER_GEOMETRY; i++) {\n      d = sea_octave((uv+(1.0 + cc_time.x * SEA_SPEED))*freq,choppy);\n      d += sea_octave((uv-(1.0 + cc_time.x * SEA_SPEED))*freq,choppy);\n        h += d * amp;\n      uv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\nfloat map_detailed(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    float d, h = 0.0;\n    const float ITER_FRAGMENT = 5.0;\n    for(float i = 0.0; i < ITER_FRAGMENT; i++) {\n      d = sea_octave((uv+(1.0 + cc_time.x * SEA_SPEED))*freq,choppy);\n      d += sea_octave((uv-(1.0 + cc_time.x * SEA_SPEED))*freq,choppy);\n        h += d * amp;\n      uv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {\n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n    fresnel = pow(fresnel,3.0) * 0.5;\n    vec3 reflected = getSkyColor(reflect(eye,n));\n    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12;\n    vec3 color = mix(refracted,reflected,fresnel);\n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;\n    color += vec3(specular(n,l,eye,60.0));\n    return color;\n}\nvec3 getNormal(vec3 p, float eps) {\n    vec3 n;\n    n.y = map_detailed(p);\n    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\n    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\n    n.y = eps;\n    return normalize(n);\n}\nfloat heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {\n    float tm = 0.0;\n    float tx = 1000.0;\n    float hx = map(ori + dir * tx);\n    if(hx > 0.0) return tx;\n    float hm = map(ori + dir * tm);\n    float tmid = 0.0;\n    for(float i = 0.0; i < NUM_STEPS; i++) {\n        tmid = mix(tm,tx, hm/(hm-hx));\n        p = ori + dir * tmid;\n      float hmid = map(p);\n    if(hmid < 0.0) {\n          tx = tmid;\n            hx = hmid;\n        } else {\n            tm = tmid;\n            hm = hmid;\n        }\n    }\n    return tmid;\n}\nvec3 getPixel(in vec2 coord, float time) {\n    vec2 uv = coord / vec2(512.0,512.0).xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= vec2(512.0,512.0).x / vec2(512.0,512.0).y;\n    vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);\n    vec3 ori = vec3(0.0,3.5,time*5.0);\n    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.14;\n    dir = normalize(dir) * fromEuler(ang);\n    vec3 p;\n    heightMapTracing(ori,dir,p);\n    vec3 dist = p - ori;\n    vec3 n = getNormal(p, dot(dist,dist) * (0.1 / vec2(512.0,512.0).x));\n    vec3 light = normalize(vec3(0.0,1.0,0.8));\n    return mix(\n        getSkyColor(dir),\n        getSeaColor(p,n,light,dir,dist),\n      pow(smoothstep(0.0,-0.02,dir.y),0.2));\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  float time = cc_time.x * 0.3 ;\n  #if AA\n    vec3 color = vec3(0.0);\n    for(float i = -1.0; i <= 1.0; i++) {\n        for(float j = -1.0; j <= 1.0; j++) {\n          vec2 uv = gl_FragCoord+vec2(i,j)/3.0;\n        color += getPixel(uv, time);\n        }\n    }\n    color /= 9.0;\n  #else\n      vec3 color = getPixel(gl_FragCoord.xy, time);\n  #endif\n  gl_FragColor = vec4(pow(color,vec3(0.65)), 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}