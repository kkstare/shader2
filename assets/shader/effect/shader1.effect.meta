{
  "ver": "1.0.27",
  "uuid": "fad5f80b-4255-493c-bb3c-e1624321118d",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat squared(float value){\n  return value * value;\n}\nfloat getAmp(float frequency) {\n  return texture2D(texture, vec2(frequency / 512.0, 0)).x;\n}\nfloat getWeight(float f) {\n  return (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0;\n}\nvoid main () {\n  vec2 uvTrue = gl_FragCoord.xy / vec2(960.0,640.0).xy;\n  vec2 uv = -1.0 + 2.0 * uvTrue;\n  float lineIntensity;\n  float glowWidth;\n  vec3 color = vec3(0.0);\n  for(float i = 0.0; i < 5.0; i++) {\n    uv.y += (0.2 * sin(uv.x + i/7.0 - cc_time.x * 0.6));\n    float Y = uv.y + getWeight(squared(i) * 20.0) * (texture2D(texture, vec2(uvTrue.x, 1)).x - 0.5);\n    lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + cc_time.x,2.0) - 1.0));\n    glowWidth = abs(lineIntensity / (150.0 * Y));\n    color += vec3(glowWidth * (2.0 + sin(cc_time.x * 0.13)),\n    glowWidth * (2.0 - sin(cc_time.x * 0.23)),\n    glowWidth * (2.0 - cos(cc_time.x * 0.19)));\n  }\n  gl_FragColor = vec4(color, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat squared(float value){\n  return value * value;\n}\nfloat getAmp(float frequency) {\n  return texture(texture, vec2(frequency / 512.0, 0)).x;\n}\nfloat getWeight(float f) {\n  return (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0;\n}\nvoid main () {\n  vec2 uvTrue = gl_FragCoord.xy / vec2(960.0,640.0).xy;\n  vec2 uv = -1.0 + 2.0 * uvTrue;\n  float lineIntensity;\n  float glowWidth;\n  vec3 color = vec3(0.0);\n  for(float i = 0.0; i < 5.0; i++) {\n    uv.y += (0.2 * sin(uv.x + i/7.0 - cc_time.x * 0.6));\n    float Y = uv.y + getWeight(squared(i) * 20.0) * (texture(texture, vec2(uvTrue.x, 1)).x - 0.5);\n    lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + cc_time.x,2.0) - 1.0));\n    glowWidth = abs(lineIntensity / (150.0 * Y));\n    color += vec3(glowWidth * (2.0 + sin(cc_time.x * 0.13)),\n    glowWidth * (2.0 - sin(cc_time.x * 0.23)),\n    glowWidth * (2.0 - cos(cc_time.x * 0.19)));\n  }\n  gl_FragColor = vec4(color, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}