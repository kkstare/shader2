// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  
// https://www.shadertoy.com/view/MsdfD2
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>
  #define iResolution vec2(960.0,640.0)

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  float rand(vec2 co){
      return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453)*5.0;
  }
  float rand2(vec2 co){
      return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453)*50.0;
  }

  void main () {
      vec2 uv = gl_FragCoord.xy / iResolution.xy;
      // vec2 mouse = iMouse.xy / iResolution.xy;
      uv.x += sin(cc_time.x);
        
      float bg = (cos(uv.x*3.14159*2.0) + sin((uv.y)*3.14159)) * 0.15;
      
      vec2 p = uv*2.0 - 1.0;
      p *= 15.0;
        
      vec2 sfunc = vec2(p.x, p.y + 5.0*sin(uv.x*10.0-cc_time.x*20.0 )+2.0*sin(uv.x*25.0+cc_time.x*40.0));

      
      sfunc.y = p.y + rand(vec2(cc_time.x, 0.0))*sin(uv.x*rand2(vec2(cc_time.x, 1.0)))
            +rand(vec2(cc_time.x, 2.0))*sin(uv.x*rand2(vec2(cc_time.x, 2.0)));
      sfunc.y +=p.y + rand(vec2(cc_time.x, 1.0))*sin(uv.x*rand2(vec2(cc_time.x, 3.0)))
            +rand(vec2(cc_time.x, 4.0))*sin(uv.x*rand2(vec2(cc_time.x, 4.0)));
      sfunc.y += p.y + rand(vec2(cc_time.x, 2.0))*sin(uv.x*rand(vec2(cc_time.x, 5.0)))
            +rand(vec2(cc_time.x, 6.0))*sin(uv.x*rand2(vec2(cc_time.x, 6.0)));
      sfunc.y += p.y + rand(vec2(cc_time.x, 3.0))*sin(uv.x*rand(vec2(cc_time.x, 7.0)))
            +rand(vec2(cc_time.x, 8.0))*sin(uv.x*rand2(vec2(cc_time.x, 8.0)));
      sfunc.y /= 0.1; // Thickness fix
      vec3 c = vec3(abs(sfunc.y));
      c = pow(c, vec3(-0.7));
      c *= vec3(0.3,0.85,1.0);
      gl_FragColor = vec4(c,1.0);
        
      sfunc.y = p.y + rand(vec2(cc_time.x, 0.1))*sin(uv.x*rand2(vec2(cc_time.x, 1.1)))
            +rand(vec2(cc_time.x, 2.1))*sin(uv.x*rand2(vec2(cc_time.x, 2.1)));
      sfunc.y +=p.y + rand(vec2(cc_time.x, 1.1))*sin(uv.x*rand2(vec2(cc_time.x, 3.1)))
            +rand(vec2(cc_time.x, 4.1))*sin(uv.x*rand2(vec2(cc_time.x, 4.1)));
      sfunc.y += p.y + rand(vec2(cc_time.x, 2.1))*sin(uv.x*rand(vec2(cc_time.x, 5.1)))
            +rand(vec2(cc_time.x, 6.1))*sin(uv.x*rand2(vec2(cc_time.x, 6.1)));
      sfunc.y += p.y + rand(vec2(cc_time.x, 3.1))*sin(uv.x*rand(vec2(cc_time.x, 7.1)))
            +rand(vec2(cc_time.x, 8.1))*sin(uv.x*rand2(vec2(cc_time.x, 8.1)));
      sfunc.y /= 0.5; // Thickness fix
      c = vec3(abs(sfunc.y));
      c = pow(c, vec3(-0.7));
      c *= vec3(0.3,0.85,1.0);
      gl_FragColor += vec4(c,1.0);
        
      sfunc.y = p.y + rand(vec2(cc_time.x, 0.0))*sin(uv.x*rand2(vec2(cc_time.x, 1.4)))
            +rand(vec2(cc_time.x, 2.4))*sin(uv.x*rand2(vec2(cc_time.x, 2.0)));
      sfunc.y +=p.y + rand(vec2(cc_time.x, 1.0))*sin(uv.x*rand2(vec2(cc_time.x, 3.4)))
            +rand(vec2(cc_time.x, 4.4))*sin(uv.x*rand2(vec2(cc_time.x, 4.0)));
      sfunc.y += p.y + rand(vec2(cc_time.x, 2.0))*sin(uv.x*rand(vec2(cc_time.x, 5.4)))
            +rand(vec2(cc_time.x, 6.4))*sin(uv.x*rand2(vec2(cc_time.x, 6.0)));
      sfunc.y += p.y + rand(vec2(cc_time.x, 3.0))*sin(uv.x*rand(vec2(cc_time.x, 7.4)))
            +rand(vec2(cc_time.x, 8.4))*sin(uv.x*rand2(vec2(cc_time.x, 8.0)));
      sfunc.y /= 1.0; // Thickness fix
      c = vec3(abs(sfunc.y));
      c = pow(c, vec3(-0.7));
      c *= vec3(0.3,0.85,1.0);
      gl_FragColor += vec4(c,1.0);
        
      sfunc.y = p.y + rand(vec2(cc_time.x, 0.2))*sin(uv.x*rand2(vec2(cc_time.x, 1.2)))
            +rand(vec2(cc_time.x, 2.2))*sin(uv.x*rand2(vec2(cc_time.x, 2.2)));
      sfunc.y +=p.y + rand(vec2(cc_time.x, 1.2))*sin(uv.x*rand2(vec2(cc_time.x, 3.2)))
            +rand(vec2(cc_time.x, 4.2))*sin(uv.x*rand2(vec2(cc_time.x, 4.2)));
      sfunc.y += p.y + rand(vec2(cc_time.x, 2.2))*sin(uv.x*rand(vec2(cc_time.x, 5.2)))
            +rand(vec2(cc_time.x, 6.2))*sin(uv.x*rand2(vec2(cc_time.x, 6.2)));
      sfunc.y += p.y + rand(vec2(cc_time.x, 3.2))*sin(uv.x*rand(vec2(cc_time.x, 7.2)))
            +rand(vec2(cc_time.x, 8.2))*sin(uv.x*rand2(vec2(cc_time.x, 8.2)));
      sfunc.y /= 10.0; // Thickness fix
      c = vec3(abs(sfunc.y));
      c = pow(c, vec3(-0.7));
      c *= vec3(0.3,0.85,1.0);
      gl_FragColor += vec4(c,1.0);
  }
}%
