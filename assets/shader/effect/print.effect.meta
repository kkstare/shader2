{
  "ver": "1.0.27",
  "uuid": "c51c05f5-9850-46e7-8662-1efd8e8ec1a3",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float beginTime;\nuniform float rows;\nuniform bool isBegin;\n#if LOCK_SPEED\n  uniform float speed;\nuniform float width;\n#endif\n#if LOCK_TIME\n    uniform float runTime;\n#endif\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  vec4 color = v_color;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    if(isBegin) {\n        #if LOCK_SPEED\n            float runTime = width*rows/speed;\n        #endif\n        float curProgress = (cc_time.x - beginTime/1000.0)/runTime;\n        if(curProgress > 1.0) {\n          curProgress = 1.0;\n        }\n        float curRow = ceil( curProgress*rows );\n        if(uv.y < (curRow-1.0)/rows    ) {\n            color.a = 1.0;\n        }else if(uv.y <= curRow/rows){\n            if(uv.x <= rows * (curProgress- (curRow-1.0)/rows)) {\n              color.a = 1.0;\n            }else{\n              color.a = 0.0;\n            }\n        }else{\n            color.a = 0.0;\n        }\n    }else{\n      color.a = 0.0;\n    }\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform myData{\n    float beginTime;\n    float rows;\n    bool isBegin;\n};\n#if LOCK_SPEED\n  uniform mydata1{\n    float speed;\n    float width;\n  };\n#endif\n#if LOCK_TIME\n    uniform mydata2{\n    float runTime;\n  };\n#endif\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  vec4 color = v_color;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    if(isBegin) {\n        #if LOCK_SPEED\n            float runTime = width*rows/speed;\n        #endif\n        float curProgress = (cc_time.x - beginTime/1000.0)/runTime;\n        if(curProgress > 1.0) {\n          curProgress = 1.0;\n        }\n        float curRow = ceil( curProgress*rows );\n        if(uv.y < (curRow-1.0)/rows    ) {\n            color.a = 1.0;\n        }else if(uv.y <= curRow/rows){\n            if(uv.x <= rows * (curProgress- (curRow-1.0)/rows)) {\n              color.a = 1.0;\n            }else{\n              color.a = 0.0;\n            }\n        }else{\n            color.a = 0.0;\n        }\n    }else{\n      color.a = 0.0;\n    }\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}