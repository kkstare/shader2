// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>
  in vec4 v_color;

  // Created by inigo quilez - iq/2013
//   https://www.youtube.com/c/InigoQuilez
//   https://iquilezles.org/
// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. 
// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.
// You can share a link to it or an unmodified screenshot of it provided you attribute "by Inigo Quilez, @iquilezles and iquilezles.org". 
// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  #define iResolution vec2(960.0,640.0)

  void main () {

    	vec2 p = (2.0*gl_FragCoord.xy-iResolution.xy)/min(iResolution.y,iResolution.x);
    
      // background color
      // vec3 bcol = vec3(1.0,0.8,0.7-0.07*p.y)*(1.0-0.25*length(p));
      vec3 bcol = vec3(1.0,0.8,0.7);

      // animate
      float tt = mod(cc_time.x,1.5)/1.5;
      float ss = pow(tt,.2)*0.5 + 0.5;
      ss = 1.0 + ss*0.5*sin(tt*6.2831*3.0 + p.y*0.5)*exp(-tt*4.0);
      p *= vec2(0.5,1.5) + ss*vec2(0.5,-0.5);

      // shape
      #if 0
          p *= 0.8;
          p.y = -0.1 - p.y*1.2 + abs(p.x)*(1.0-abs(p.x));
          float r = length(p);
        float d = 0.5;
      #else
        p.y -= 0.25;
          float a = atan(p.x,p.y)/3.141593;
          float r = length(p);
          float h = abs(a);
          float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);
      #endif
      
      // color
      float s = 0.75 + 0.75*p.x;
      s *= 1.0-0.4*r;
      s = 0.3 + 0.7*s;
      s *= 0.5+0.5*pow( 1.0-clamp(r/d, 0.0, 1.0 ), 0.1 );
      vec3 hcol = vec3(1.0,0.4*r,0.3)*s;
    
      vec3 col = mix( bcol, hcol, smoothstep( -0.01, 0.01, d-r) );

      gl_FragColor = vec4(col,1.0);
      
  }
}%
