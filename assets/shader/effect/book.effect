// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture1: { value: white }
        texture2: { value: white }
        texture3: { value: white }
        texture4: { value: white }

        angle: { value: 0.0 }
        length: { value: 0.0 }

        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;


  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture1;
  uniform sampler2D texture2;
  uniform sampler2D texture3;
  uniform sampler2D texture4;

  uniform myData{
    //书翻起的角度
    float angle;
    //书底部被翻起的距离
    float length;
  };


  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec2 uv = v_uv0;


    #if USE_TEXTURE
        float angle1 = 180.0-angle*2.0;
        float angle3 = 90.0-(90.0-angle)*2.0;



        float pai = 3.1415926;

        float yMax = tan( pai * angle/180.0 )*length;
        float xExtend = 1.0 -  yMax/tan(pai * angle3/180.0);

        float y1 = 1.0-tan( pai * angle/180.0 )*(uv.x-(1.0-length));
        // float y2 = 1.0-tan( pai * angle1/180.0 )*(1.0-length-uv.x) - 0.05*sin(5.0*( uv.x - 0.5*((1.0-length)-(1.0-length-cos(pai*angle1/180.0)*length)) )  );
        // float y2 = 1.0-tan( pai * angle1/180.0 )*(1.0-length-uv.x) - 0.1*sin(uv.x *5.0);
        float y2 = 1.0-tan( pai * angle1/180.0 )*(1.0-length-uv.x);
        float y3 = 1.0-tan( pai * angle3/180.0 )*(uv.x - xExtend);
        
        // mat2 myMat2 = mat2(0.2,0.2,0.2,0.2);

        // mat3 myMat3 = mat3(0.2,0.2,0.2,0.2,
        //                   0.2,0.2,0.2,0.2,
        //                   0.2);
        // mat4 myMat4 = mat4(0.2,0.2,0.2,0.2,
        //                     0.2,0.2,0.2,0.2,
        //                     0.2,0.2,0.2,0.2,
        //                     0.2,0.2,0.2,0.2);
    

        // uv *= myMat4;

        // matrixCompMult(myMat4 , myMat4);
        if( uv.y > y1 ){
          if(uv.x>1.0-length ){
            CCTexture(texture4, uv, o);
          }
        }else if(uv.y<y2 && uv.y>y3 ){

            //旋转点
            vec2 rotatePoint = vec2(1.0-length,1.0);

            // vec2 newUV = uv ;
            //相对坐标
            vec2 newUV = uv - rotatePoint;
            
            //旋转角度
            float angleRotate = -(180.0-2.0*angle);
            
            float hudu = pai*angleRotate/180.0;

            newUV.x = newUV.x*cos(hudu) - newUV.y*sin(hudu);
            newUV.y = newUV.x*sin(hudu) + newUV.y*cos(hudu);

            // uv = newUV + rotatePoint ;

            uv.x = uv.x - 1.0 + 2.0*length;
             
            CCTexture(texture3, uv, o);

        }else{
            if(uv.x < 0.5){
              CCTexture(texture1, uv, o);
            }else{
              CCTexture(texture2, uv, o);
            }
        }
      
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
