// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  
// 该shader原地址 https://www.shadertoy.com/view/lsBSRR
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        texture1: { value: white }
        texture2: { value: white }

        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
    uniform sampler2D texture;
    uniform sampler2D texture1;
    uniform sampler2D texture2;

  #endif

  float tex(vec2 uv, float s)
  {    
      float col;
      float ntiles = 10.0;
      
      // Calculate the shape of the LEDs
      vec2 r = mod(uv * ntiles, 1.0) - vec2(0.5);
      col = 1.0 - dot(r, r);
      
      // Add some light to the tunnel
      vec4 n = texture(texture, floor(uv * ntiles) / ntiles);
      col *= mod(n.r * n.g * n.b * s + cc_time.x * 0.1 + clamp(s, 0.0, 0.6), 1.0);    
      return clamp(col, 0.0, 1.0);
  }

  #define iResolution vec2(960.0,640.0)

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

  
	vec2 uv = gl_FragCoord.xy / iResolution.xy;
    vec2 uv1 = uv * 2.0 - 1.0;
    
    uv1.x *= iResolution.x / iResolution.y;
    
    // Calculate new UV coordinates
    vec2 center = vec2(0.0, 0.0) + 
        vec2(0.075*(0.5 + 0.5 * sin(cc_time.x*4.0)),
             0.05*(0.5 + 0.5 * sin(cc_time.x*0.01 + 1.7)));
    vec2 p = uv1 - center;
    float r = length(p);
    float a = atan(p.y, p.x) * 3.0 / 3.14;
    vec2 uv2= vec2(1.0 / r + cc_time.x*0.25, a);

    // Read the sound texture
    float sound = texture(texture2, vec2(0.01, 1.0 - r)).r;
    sound = pow(sound, 1.5);
    
    // Calculate the colors
    vec3 c1 = vec3(0.02, 0.1, 0.02);
    vec3 c2 = mix( vec3(1.0, 0.6, 0.6), vec3(0.6, 0.6, 1.0), vec3(0.5 + 0.5 * sin(cc_time.x*0.1)));
    vec3 c  = mix(c1, c2, r);
    vec3 coltunnel =  sound * c * tex(uv2, sound) + ( 0.15 * texture(texture1, uv2).rgb);
    vec3 colback   = vec3(0.05,0.05,0.05);

	  gl_FragColor = vec4(r * coltunnel + (1.0 - r) * colback, 1.0);
  }
}%
