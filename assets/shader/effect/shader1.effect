// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// 该shader原地址 https://www.shadertoy.com/view/4ljGD1

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  #define iResolution vec2(960.0,640.0)


  float squared(float value){ 
    return value * value; 
  }

  float getAmp(float frequency) { 
    return texture(texture, vec2(frequency / 512.0, 0)).x; 
  }

  float getWeight(float f) {
    return (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0; 
  }

  void main () {
    vec2 uvTrue = gl_FragCoord.xy / iResolution.xy;
    vec2 uv = -1.0 + 2.0 * uvTrue;
    
	  float lineIntensity;
    float glowWidth;
    vec3 color = vec3(0.0);
    
    for(float i = 0.0; i < 5.0; i++) {        
      uv.y += (0.2 * sin(uv.x + i/7.0 - cc_time.x * 0.6));
      
      float Y = uv.y + getWeight(squared(i) * 20.0) * (texture(texture, vec2(uvTrue.x, 1)).x - 0.5);
      
      lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + cc_time.x,2.0) - 1.0));
      
      glowWidth = abs(lineIntensity / (150.0 * Y));
      
      color += vec3(glowWidth * (2.0 + sin(cc_time.x * 0.13)),
      
      glowWidth * (2.0 - sin(cc_time.x * 0.23)),
      
      glowWidth * (2.0 - cos(cc_time.x * 0.19)));
    }	
	

    // ALPHA_TEST(o);
	  gl_FragColor = vec4(color, 1.0);

  }
}%
