{
  "ver": "1.0.27",
  "uuid": "e4b1d180-dc75-4e72-8e54-586038ed81e0",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform sampler2D texture1;\n  uniform sampler2D texture2;\n#endif\nfloat tex(vec2 uv, float s)\n{\n    float col;\n    float ntiles = 10.0;\n    vec2 r = mod(uv * ntiles, 1.0) - vec2(0.5);\n    col = 1.0 - dot(r, r);\n    vec4 n = texture2D(texture, floor(uv * ntiles) / ntiles);\n    col *= mod(n.r * n.g * n.b * s + cc_time.x * 0.1 + clamp(s, 0.0, 0.6), 1.0);\n    return clamp(col, 0.0, 1.0);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\nvec2 uv = gl_FragCoord.xy / vec2(960.0,640.0).xy;\n  vec2 uv1 = uv * 2.0 - 1.0;\n  uv1.x *= vec2(960.0,640.0).x / vec2(960.0,640.0).y;\n  vec2 center = vec2(0.0, 0.0) +\n      vec2(0.075*(0.5 + 0.5 * sin(cc_time.x*4.0)),\n           0.05*(0.5 + 0.5 * sin(cc_time.x*0.01 + 1.7)));\n  vec2 p = uv1 - center;\n  float r = length(p);\n  float a = atan(p.y, p.x) * 3.0 / 3.14;\n  vec2 uv2= vec2(1.0 / r + cc_time.x*0.25, a);\n  float sound = texture2D(texture2, vec2(0.01, 1.0 - r)).r;\n  sound = pow(sound, 1.5);\n  vec3 c1 = vec3(0.02, 0.1, 0.02);\n  vec3 c2 = mix( vec3(1.0, 0.6, 0.6), vec3(0.6, 0.6, 1.0), vec3(0.5 + 0.5 * sin(cc_time.x*0.1)));\n  vec3 c  = mix(c1, c2, r);\n  vec3 coltunnel =  sound * c * tex(uv2, sound) + ( 0.15 * texture2D(texture1, uv2).rgb);\n  vec3 colback   = vec3(0.05,0.05,0.05);\n  gl_FragColor = vec4(r * coltunnel + (1.0 - r) * colback, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform sampler2D texture1;\n  uniform sampler2D texture2;\n#endif\nfloat tex(vec2 uv, float s)\n{\n    float col;\n    float ntiles = 10.0;\n    vec2 r = mod(uv * ntiles, 1.0) - vec2(0.5);\n    col = 1.0 - dot(r, r);\n    vec4 n = texture(texture, floor(uv * ntiles) / ntiles);\n    col *= mod(n.r * n.g * n.b * s + cc_time.x * 0.1 + clamp(s, 0.0, 0.6), 1.0);\n    return clamp(col, 0.0, 1.0);\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\nvec2 uv = gl_FragCoord.xy / vec2(960.0,640.0).xy;\n  vec2 uv1 = uv * 2.0 - 1.0;\n  uv1.x *= vec2(960.0,640.0).x / vec2(960.0,640.0).y;\n  vec2 center = vec2(0.0, 0.0) +\n      vec2(0.075*(0.5 + 0.5 * sin(cc_time.x*4.0)),\n           0.05*(0.5 + 0.5 * sin(cc_time.x*0.01 + 1.7)));\n  vec2 p = uv1 - center;\n  float r = length(p);\n  float a = atan(p.y, p.x) * 3.0 / 3.14;\n  vec2 uv2= vec2(1.0 / r + cc_time.x*0.25, a);\n  float sound = texture(texture2, vec2(0.01, 1.0 - r)).r;\n  sound = pow(sound, 1.5);\n  vec3 c1 = vec3(0.02, 0.1, 0.02);\n  vec3 c2 = mix( vec3(1.0, 0.6, 0.6), vec3(0.6, 0.6, 1.0), vec3(0.5 + 0.5 * sin(cc_time.x*0.1)));\n  vec3 c  = mix(c1, c2, r);\n  vec3 coltunnel =  sound * c * tex(uv2, sound) + ( 0.15 * texture(texture1, uv2).rgb);\n  vec3 colback   = vec3(0.05,0.05,0.05);\n  gl_FragColor = vec4(r * coltunnel + (1.0 - r) * colback, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}