// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        amplitude: {value: 0.2}
        angularSpeed: {value: 3.0}
        moveSpeed: {value: 5.0}
        detaY: {value : 0}
 
 
        beginColor: {value: [255,0,0,255] ,editor: {type: color} }
        endColor: {value: [0,255,0,255],editor: {type: color} }
        # outLineColor: {value: [255,255,255,255],editor: {type: color} }

}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif


  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
  

    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  #include <cc-global>
  #include <cc-local>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  
  #if USE_DYNAMIC
  uniform global{
    float amplitude;
    float angularSpeed;
    float moveSpeed;
    float detaY;
  };

  #endif

  #if USE_COLOR
  uniform color{
    vec4 beginColor;
    vec4 endColor;
  };

    #if IS_HORIZONTAL
    #endif

    #if IS_VERTICAL
    #endif

    #if IS_DYNAMIC
    #endif

    // #if IS_OUTLINE
    //   uniform outLine{
    //     vec4 outLineColor; 
    //   };
    // #endif

  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 a_color = v_color;

  
    #if USE_TEXTURE
        vec2 uv = v_uv0;

        #if USE_DYNAMIC

            // 波浪运动
            if(moveSpeed == 0.0){
              uv.y  = uv.y + amplitude *sin(angularSpeed * 3.14 * uv.x) + detaY;   
            }else{
              uv.y  = uv.y + amplitude *sin(angularSpeed * 3.14 * uv.x)*sin(moveSpeed*cc_time.x) +detaY ;
            }


            // 单峰波浪
            // if(uv.x >  abs(sin( cc_time.x))-0.1 && uv.x <  abs(sin( cc_time.x))+0.1 ) {
            //     uv.y = uv.y +  abs( abs(sin( cc_time.x)) -uv.x ) ;
            // }

        #endif

        #if USE_COLOR
          a_color = beginColor + (endColor-beginColor)*(uv.x+uv.y)/2.0;

          #if IS_HORIZONTAL
          a_color = beginColor + (endColor-beginColor)*uv.x;
          #endif

          #if IS_VERTICAL
          a_color = beginColor + (endColor-beginColor)*uv.y;
          #endif

          #if IS_DYNAMIC
            //颜色消退
            // a_color = beginColor + (endColor-beginColor)*( uv.x +  sin(cc_time.x) ) ;

            // 颜色回弹
            // if(  abs( abs(sin(cc_time.x)) - uv.x ) <0.1 ) {
            //   a_color =  endColor  ;
            // }
      
            // // 颜色斜回弹
            // if(  abs( abs(sin(cc_time.x)) - (uv.x+uv.y)/2.0 ) <0.1 ) {
            //   a_color =  endColor  ;
            // }

            // 类扫光效果
            // if(  abs( tan(cc_time.x) - (uv.x+uv.y)/2.0 ) <0.05 ) {
            //   a_color =  endColor  ;
            // }
            
            // 渐变扫光效果
            if(  abs( tan(cc_time.x) - (uv.x+uv.y)/2.0 ) <0.05 ) {
              a_color =  endColor  ;
            }
            
            // 交错扫光效果
            // if(  abs( sin(cc_time.x) - (uv.x+uv.y)/2.0 ) <0.05 ) {
            //   a_color =  endColor  ;
            // }else if(abs( sin(cc_time.x) - (1.0-uv.x+uv.y)/2.0 ) <0.05){
            //   a_color = beginColor ;
            // }
          #endif

          // #if IS_OUTLINE

          // #endif

        #endif

          o*=texture(texture,uv);
    #endif


    o *= a_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
