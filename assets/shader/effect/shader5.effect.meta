{
  "ver": "1.0.25",
  "uuid": "df59208f-2060-484d-b7ca-215a42750dcf",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n#extension GL_EXT_shader_texture_lod : enable\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec2 diff(vec2 uv, float mip) {\n    vec2 texel = 1.0/vec2(512.0,512.0).xy;\n    vec4 t = float(mip*mip/2.0) *vec4(texel, -texel.y, 0);\n    float d =    texture2DLodEXT(texture, fract(uv+(t.ww+0.0)), 0.1).w; float d_n =  texture2DLodEXT(texture, fract(uv+(t.wy+0.0)), 0.1).w; float d_e =  texture2DLodEXT(texture, fract(uv+(t.xw+0.0)), 0.1).w;\n    float d_s =  texture2DLodEXT(texture, fract(uv+(t.wz+0.0)), 0.1).w; float d_w =  texture2DLodEXT(texture, fract(uv+(-t.xw+0.0)), 0.1).w; float d_nw = texture2DLodEXT(texture, fract(uv+(-t.xz+0.0)), 0.1).w;\n    float d_sw = texture2DLodEXT(texture, fract(uv+(-t.xy+0.0)), 0.1).w; float d_ne = texture2DLodEXT(texture, fract(uv+(t.xy+0.0)), 0.1).w; float d_se = texture2DLodEXT(texture, fract(uv+(t.xz+0.0)), 0.1).w;\n    return vec2(\n        0.5 * (d_e - d_w) + 0.25 * (d_ne - d_nw + d_se - d_sw),\n        0.5 * (d_n - d_s) + 0.25 * (d_ne + d_nw - d_se - d_sw)\n    );\n}\nvec4 contrast(vec4 col, float x) {\n  return x * (col - 0.5) + 0.5;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n   vec2 uv = gl_FragCoord.xy / vec2(512.0,512.0).xy;\n  vec2 dxy = vec2(0);\n  float occ, mip = 0.0;\n  float d   = texture2DLodEXT(texture, fract(uv+(undefined+0.0)), 0.1).w;\n      for(mip = 1.0; mip <= 10.0; mip += 1.0) {\n      dxy += (1.0/pow(2.0,mip)) * diff(uv, mip-1.0);\n    occ += softclamp(-2.0, 2.0, d - texture2DLodEXT(texture, fract(uv+(undefined+0.0)), 0.1).w,1.0)/(pow(1.5,mip));\n  }\n  dxy /= float(10.0);\n  occ = pow(max(0.0,softclamp(0.2,0.8,100.0*occ + 0.5,1.0)),0.5);\n  vec3 avd;\n  vec3 ld = light(uv, 3200.0, 0.5, dxy, cc_time.x, avd);\n  float spec = ggx(avd, vec3(0,1,0), ld, 0.1, 0.1);\n    spec = (log(1000.0+1.0)/1000.0)*log(1.0+1000.0*spec);\n  gl_FragColor = (diffuse + 4.0*mix(vec4(spec),1.5*diffuse*spec,0.3));\n  gl_FragColor = mix(1.0,occ,0.7) * (softclamp(0.0,1.0,contrast(gl_FragColor,4.5),3.0));\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n#extension GL_EXT_shader_texture_lod : enable\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec2 diff(vec2 uv, float mip) {\n    vec2 texel = 1.0/vec2(512.0,512.0).xy;\n    vec4 t = float(mip*mip/2.0) *vec4(texel, -texel.y, 0);\n    float d =    texture2DLodEXT(texture, fract(uv+(t.ww+0.0)), 0.1).w; float d_n =  texture2DLodEXT(texture, fract(uv+(t.wy+0.0)), 0.1).w; float d_e =  texture2DLodEXT(texture, fract(uv+(t.xw+0.0)), 0.1).w;\n    float d_s =  texture2DLodEXT(texture, fract(uv+(t.wz+0.0)), 0.1).w; float d_w =  texture2DLodEXT(texture, fract(uv+(-t.xw+0.0)), 0.1).w; float d_nw = texture2DLodEXT(texture, fract(uv+(-t.xz+0.0)), 0.1).w;\n    float d_sw = texture2DLodEXT(texture, fract(uv+(-t.xy+0.0)), 0.1).w; float d_ne = texture2DLodEXT(texture, fract(uv+(t.xy+0.0)), 0.1).w; float d_se = texture2DLodEXT(texture, fract(uv+(t.xz+0.0)), 0.1).w;\n    return vec2(\n        0.5 * (d_e - d_w) + 0.25 * (d_ne - d_nw + d_se - d_sw),\n        0.5 * (d_n - d_s) + 0.25 * (d_ne + d_nw - d_se - d_sw)\n    );\n}\nvec4 contrast(vec4 col, float x) {\n  return x * (col - 0.5) + 0.5;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n   vec2 uv = gl_FragCoord.xy / vec2(512.0,512.0).xy;\n  vec2 dxy = vec2(0);\n  float occ, mip = 0.0;\n  float d   = texture2DLodEXT(texture, fract(uv+(undefined+0.0)), 0.1).w;\n      for(mip = 1.0; mip <= 10.0; mip += 1.0) {\n      dxy += (1.0/pow(2.0,mip)) * diff(uv, mip-1.0);\n    occ += softclamp(-2.0, 2.0, d - texture2DLodEXT(texture, fract(uv+(undefined+0.0)), 0.1).w,1.0)/(pow(1.5,mip));\n  }\n  dxy /= float(10.0);\n  occ = pow(max(0.0,softclamp(0.2,0.8,100.0*occ + 0.5,1.0)),0.5);\n  vec3 avd;\n  vec3 ld = light(uv, 3200.0, 0.5, dxy, cc_time.x, avd);\n  float spec = ggx(avd, vec3(0,1,0), ld, 0.1, 0.1);\n    spec = (log(1000.0+1.0)/1000.0)*log(1.0+1000.0*spec);\n  gl_FragColor = (diffuse + 4.0*mix(vec4(spec),1.5*diffuse*spec,0.3));\n  gl_FragColor = mix(1.0,occ,0.7) * (softclamp(0.0,1.0,contrast(gl_FragColor,4.5),3.0));\n}"
      }
    }
  ],
  "subMetas": {}
}