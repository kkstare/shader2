{
  "ver": "1.0.27",
  "uuid": "21244cd1-832d-46ed-ab34-b44a28a58180",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_DYNAMIC\nuniform float amplitude;\nuniform float angularSpeed;\nuniform float moveSpeed;\nuniform float detaY;\n#endif\n#if USE_COLOR\nuniform vec4 beginColor;\nuniform vec4 endColor;\n  #if IS_HORIZONTAL\n  #endif\n  #if IS_VERTICAL\n  #endif\n  #if IS_DYNAMIC\n  #endif\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 a_color = v_color;\n  #if USE_TEXTURE\n      vec2 uv = v_uv0;\n      #if USE_DYNAMIC\n          if(moveSpeed == 0.0){\n            uv.y  = uv.y + amplitude *sin(angularSpeed * 3.14 * uv.x) + detaY;\n          }else{\n            uv.y  = uv.y + amplitude *sin(angularSpeed * 3.14 * uv.x)*sin(moveSpeed*cc_time.x) +detaY ;\n          }\n      #endif\n      #if USE_COLOR\n        a_color = beginColor + (endColor-beginColor)*(uv.x+uv.y)/2.0;\n        #if IS_HORIZONTAL\n        a_color = beginColor + (endColor-beginColor)*uv.x;\n        #endif\n        #if IS_VERTICAL\n        a_color = beginColor + (endColor-beginColor)*uv.y;\n        #endif\n        #if IS_DYNAMIC\n          if(  abs( tan(cc_time.x) - (uv.x+uv.y)/2.0 ) <0.05 ) {\n            a_color =  endColor  ;\n          }\n        #endif\n      #endif\n        o*=texture2D(texture,uv);\n  #endif\n  o *= a_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_DYNAMIC\nuniform global{\n  float amplitude;\n  float angularSpeed;\n  float moveSpeed;\n  float detaY;\n};\n#endif\n#if USE_COLOR\nuniform color{\n  vec4 beginColor;\n  vec4 endColor;\n};\n  #if IS_HORIZONTAL\n  #endif\n  #if IS_VERTICAL\n  #endif\n  #if IS_DYNAMIC\n  #endif\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 a_color = v_color;\n  #if USE_TEXTURE\n      vec2 uv = v_uv0;\n      #if USE_DYNAMIC\n          if(moveSpeed == 0.0){\n            uv.y  = uv.y + amplitude *sin(angularSpeed * 3.14 * uv.x) + detaY;\n          }else{\n            uv.y  = uv.y + amplitude *sin(angularSpeed * 3.14 * uv.x)*sin(moveSpeed*cc_time.x) +detaY ;\n          }\n      #endif\n      #if USE_COLOR\n        a_color = beginColor + (endColor-beginColor)*(uv.x+uv.y)/2.0;\n        #if IS_HORIZONTAL\n        a_color = beginColor + (endColor-beginColor)*uv.x;\n        #endif\n        #if IS_VERTICAL\n        a_color = beginColor + (endColor-beginColor)*uv.y;\n        #endif\n        #if IS_DYNAMIC\n          if(  abs( tan(cc_time.x) - (uv.x+uv.y)/2.0 ) <0.05 ) {\n            a_color =  endColor  ;\n          }\n        #endif\n      #endif\n        o*=texture(texture,uv);\n  #endif\n  o *= a_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}