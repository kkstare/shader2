{
  "ver": "1.0.27",
  "uuid": "d6b00447-e1c5-4412-9443-be3feade21ed",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform float angle;\nuniform float length;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  #if USE_TEXTURE\n      float angle1 = 180.0-angle*2.0;\n      float angle3 = 90.0-(90.0-angle)*2.0;\n      float pai = 3.1415926;\n      float yMax = tan( pai * angle/180.0 )*length;\n      float xExtend = 1.0 -  yMax/tan(pai * angle3/180.0);\n      float y1 = 1.0-tan( pai * angle/180.0 )*(uv.x-(1.0-length));\n      float y2 = 1.0-tan( pai * angle1/180.0 )*(1.0-length-uv.x);\n      float y3 = 1.0-tan( pai * angle3/180.0 )*(uv.x - xExtend);\n      if( uv.y > y1 ){\n        if(uv.x>1.0-length ){\n  vec4 texture4_tmp = texture2D(texture4, uv);\n  #if CC_USE_ALPHA_ATLAS_texture4\n      texture4_tmp.a *= texture2D(texture4, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture4_tmp.rgb * texture4_tmp.rgb);\n    o.a *= texture4_tmp.a;\n  #else\n    o *= texture4_tmp;\n  #endif\n        }\n      }else if(uv.y<y2 && uv.y>y3 ){\n          vec2 rotatePoint = vec2(1.0-length,1.0);\n          vec2 newUV = uv - rotatePoint;\n          float angleRotate = -(180.0-2.0*angle);\n          float hudu = pai*angleRotate/180.0;\n          newUV.x = newUV.x*cos(hudu) - newUV.y*sin(hudu);\n          newUV.y = newUV.x*sin(hudu) + newUV.y*cos(hudu);\n          uv.x = uv.x - 1.0 + 2.0*length;\n  vec4 texture3_tmp = texture2D(texture3, uv);\n  #if CC_USE_ALPHA_ATLAS_texture3\n      texture3_tmp.a *= texture2D(texture3, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture3_tmp.rgb * texture3_tmp.rgb);\n    o.a *= texture3_tmp.a;\n  #else\n    o *= texture3_tmp;\n  #endif\n      }else{\n          if(uv.x < 0.5){\n  vec4 texture1_tmp = texture2D(texture1, uv);\n  #if CC_USE_ALPHA_ATLAS_texture1\n      texture1_tmp.a *= texture2D(texture1, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture1_tmp.rgb * texture1_tmp.rgb);\n    o.a *= texture1_tmp.a;\n  #else\n    o *= texture1_tmp;\n  #endif\n          }else{\n  vec4 texture2_tmp = texture2D(texture2, uv);\n  #if CC_USE_ALPHA_ATLAS_texture2\n      texture2_tmp.a *= texture2D(texture2, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture2_tmp.rgb * texture2_tmp.rgb);\n    o.a *= texture2_tmp.a;\n  #else\n    o *= texture2_tmp;\n  #endif\n          }\n      }\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform myData{\n  float angle;\n  float length;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  #if USE_TEXTURE\n      float angle1 = 180.0-angle*2.0;\n      float angle3 = 90.0-(90.0-angle)*2.0;\n      float pai = 3.1415926;\n      float yMax = tan( pai * angle/180.0 )*length;\n      float xExtend = 1.0 -  yMax/tan(pai * angle3/180.0);\n      float y1 = 1.0-tan( pai * angle/180.0 )*(uv.x-(1.0-length));\n      float y2 = 1.0-tan( pai * angle1/180.0 )*(1.0-length-uv.x);\n      float y3 = 1.0-tan( pai * angle3/180.0 )*(uv.x - xExtend);\n      if( uv.y > y1 ){\n        if(uv.x>1.0-length ){\n  vec4 texture4_tmp = texture(texture4, uv);\n  #if CC_USE_ALPHA_ATLAS_texture4\n      texture4_tmp.a *= texture(texture4, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture4_tmp.rgb * texture4_tmp.rgb);\n    o.a *= texture4_tmp.a;\n  #else\n    o *= texture4_tmp;\n  #endif\n        }\n      }else if(uv.y<y2 && uv.y>y3 ){\n          vec2 rotatePoint = vec2(1.0-length,1.0);\n          vec2 newUV = uv - rotatePoint;\n          float angleRotate = -(180.0-2.0*angle);\n          float hudu = pai*angleRotate/180.0;\n          newUV.x = newUV.x*cos(hudu) - newUV.y*sin(hudu);\n          newUV.y = newUV.x*sin(hudu) + newUV.y*cos(hudu);\n          uv.x = uv.x - 1.0 + 2.0*length;\n  vec4 texture3_tmp = texture(texture3, uv);\n  #if CC_USE_ALPHA_ATLAS_texture3\n      texture3_tmp.a *= texture(texture3, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture3_tmp.rgb * texture3_tmp.rgb);\n    o.a *= texture3_tmp.a;\n  #else\n    o *= texture3_tmp;\n  #endif\n      }else{\n          if(uv.x < 0.5){\n  vec4 texture1_tmp = texture(texture1, uv);\n  #if CC_USE_ALPHA_ATLAS_texture1\n      texture1_tmp.a *= texture(texture1, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture1_tmp.rgb * texture1_tmp.rgb);\n    o.a *= texture1_tmp.a;\n  #else\n    o *= texture1_tmp;\n  #endif\n          }else{\n  vec4 texture2_tmp = texture(texture2, uv);\n  #if CC_USE_ALPHA_ATLAS_texture2\n      texture2_tmp.a *= texture(texture2, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture2_tmp.rgb * texture2_tmp.rgb);\n    o.a *= texture2_tmp.a;\n  #else\n    o *= texture2_tmp;\n  #endif\n          }\n      }\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}