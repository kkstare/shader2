
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 
              - 300.0
              - 300.0
          uOffset: 
            value: 0.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec2 uSize;
		float uOffset;
	};
	uniform sampler2D uTex;

    vec4 filter(mat3 filter, sampler2D tex, vec2 coord, vec2 texSize, float offset)
	{
	    vec4 outCol = vec4(0, 0, 0, 0);
	    for (int i = 0; i < 3; i++)
	    {
	        for (int j = 0; j < 3; j++)
	        {
	            vec2 newCoord = vec2(coord.x + (float(i) - 1.0) * offset, coord.y + (float(j) - 1.0) * offset);
	            vec2 newUV = vec2(newCoord.x / texSize.x, newCoord.y / texSize.y);
	            outCol += texture2D(tex, newUV) * filter[i][j];
	        }
	    }
	    return outCol;
	}
	vec4 BlackWhitePencil_main(sampler2D Tex, vec2 UV, vec2 Size, float Offset) 
	{
	    mat3 pencilFilter = mat3(-0.5, -1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.5);
	    vec2 coord = vec2(UV.x * Size.x, UV.y * Size.y);
	    vec4 filterCol = filter(pencilFilter, Tex, coord, Size, Offset);
	    float gray = 0.3 * filterCol.x + 0.59 * filterCol.y + 0.11 * filterCol.z;
	    gray = abs(gray);
	    gray = 1.0 - gray;
	    return vec4(gray, gray, gray, filterCol.a);
	}
	    
	void main () {
	    gl_FragColor = BlackWhitePencil_main(texture, v_uv0, uSize, uOffset);
	} 
	
}%
        