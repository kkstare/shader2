{
  "ver": "1.0.27",
  "uuid": "b2baacb6-c030-47f0-ac2d-36d8999a177f",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\n    attribute vec2 a_uv0;\n    varying vec2 v_uv0;\n#endif\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\n  #if USE_TEXTURE\n      varying vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  varying vec4 v_color;\n  uniform vec2 uSize;\nuniform float uIntensity;\nuniform sampler2D uTex;\n  float compare(vec3 a, vec3 b) {\n    vec3 diff = (a - b);\n    return dot(diff, diff);\n}\nvec4 GameBoy8Bit_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity)\n{\n    vec2 normalizedSize = vec2(1.0 / Size);\n    float dx = Intensity * normalizedSize.x;\n    float dy = Intensity * normalizedSize.y;\n    vec2 pixelUV = vec2(dx * floor(UV.x / dx), dy * floor(UV.y / dy));\n    vec4 color = texture2D(Tex, pixelUV);\n    vec3 dst0 = vec3(0, 0, 0);\n    vec3 dst1 = vec3(0, 0, 0);\n    float best0 = 1e3;\n    float best1 = 1e3;\n        { const vec3 tst = vec3(0.68, 0.79, 0.27); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } };\n    { const vec3 tst = vec3(0.47, 0.69, 0.42); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } };\n    { const vec3 tst = vec3(0.13, 0.43, 0.37); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } };\n    { const vec3 tst = vec3(0.03, 0.16, 0.33); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } };\n    #undef TCOLOR\n    best0 = sqrt(best0);\n    best1 = sqrt(best1);\n    return vec4(vec3(mod(pixelUV.x + pixelUV.y, 2.0) > (1.0 + best1 / (best0 + best1)) ? dst1 : dst0), color.a);\n}\nvoid main () {\n    gl_FragColor = GameBoy8Bit_main(texture, v_uv0, uSize, uIntensity);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\n    in vec2 a_uv0;\n    out vec2 v_uv0;\n#endif\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n    mat4 mvp;\n    #if CC_USE_MODEL\n        mvp = cc_matViewProj * cc_matWorld;\n    #else\n        mvp = cc_matViewProj;\n    #endif\n    #if USE_TEXTURE\n        v_uv0 = a_uv0;\n    #endif\n    #if USE_TINT\n    #endif\n    v_color = a_color;\n    gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\n  precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  #if USE_TEXTURE\n      in vec2 v_uv0;\n      uniform sampler2D texture;\n  #endif\n  in vec4 v_color;\n  uniform Constant {\n  vec2 uSize;\n  float uIntensity;\n};\nuniform sampler2D uTex;\n  float compare(vec3 a, vec3 b) {\n    vec3 diff = (a - b);\n    return dot(diff, diff);\n}\nvec4 GameBoy8Bit_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity)\n{\n    vec2 normalizedSize = vec2(1.0 / Size);\n    float dx = Intensity * normalizedSize.x;\n    float dy = Intensity * normalizedSize.y;\n    vec2 pixelUV = vec2(dx * floor(UV.x / dx), dy * floor(UV.y / dy));\n    vec4 color = texture2D(Tex, pixelUV);\n    vec3 dst0 = vec3(0, 0, 0);\n    vec3 dst1 = vec3(0, 0, 0);\n    float best0 = 1e3;\n    float best1 = 1e3;\n        { const vec3 tst = vec3(0.68, 0.79, 0.27); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } };\n    { const vec3 tst = vec3(0.47, 0.69, 0.42); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } };\n    { const vec3 tst = vec3(0.13, 0.43, 0.37); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } };\n    { const vec3 tst = vec3(0.03, 0.16, 0.33); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } };\n    #undef TCOLOR\n    best0 = sqrt(best0);\n    best1 = sqrt(best1);\n    return vec4(vec3(mod(pixelUV.x + pixelUV.y, 2.0) > (1.0 + best1 / (best0 + best1)) ? dst1 : dst0), color.a);\n}\nvoid main () {\n    gl_FragColor = GameBoy8Bit_main(texture, v_uv0, uSize, uIntensity);\n}"
      }
    }
  ],
  "subMetas": {}
}