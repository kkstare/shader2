
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 
              - 300.0
              - 300.0
          uIntensity: 
            value: 3.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec2 uSize;
		float uIntensity;
	};
	uniform sampler2D uTex;

    float compare(vec3 a, vec3 b) {
	    vec3 diff = (a - b);
	    return dot(diff, diff);
	}
	vec4 GameBoy8Bit_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity) 
	{
	    vec2 normalizedSize = vec2(1.0 / Size);
	    float dx = Intensity * normalizedSize.x;
	    float dy = Intensity * normalizedSize.y;
	    vec2 pixelUV = vec2(dx * floor(UV.x / dx), dy * floor(UV.y / dy));
	    vec4 color = texture2D(Tex, pixelUV);
	    vec3 dst0 = vec3(0, 0, 0);
	    vec3 dst1 = vec3(0, 0, 0);
	    float best0 = 1e3;
	    float best1 = 1e3;
	    #define TCOLOR(R, G, B) { const vec3 tst = vec3(R, G, B); float err = compare(color.rgb, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } }
	    TCOLOR(0.68, 0.79, 0.27);
	    TCOLOR(0.47, 0.69, 0.42);
	    TCOLOR(0.13, 0.43, 0.37);
	    TCOLOR(0.03, 0.16, 0.33);
	    #undef TCOLOR
	    best0 = sqrt(best0);
	    best1 = sqrt(best1);
	    return vec4(vec3(mod(pixelUV.x + pixelUV.y, 2.0) > (1.0 + best1 / (best0 + best1)) ? dst1 : dst0), color.a);
	}
	void main () {
	    gl_FragColor = GameBoy8Bit_main(texture, v_uv0, uSize, uIntensity);
	} 
	
}%
        