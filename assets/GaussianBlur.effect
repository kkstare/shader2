
CCEffect %{
techniques: 
  - passes: 
      - vert: vs
        frag: fs
        blendState: 
          targets: 
            - blend: true
        rasterizerState: 
          cullMode: none
        properties: 
          texture: 
            value: white
          uSize: 
            value: 
              - 300.0
              - 300.0
          uIntensity: 
            value: 3.0
}%
        
CCProgram vs %{
    precision highp float;
    #include <cc-global>
    #include <cc-local>

    in vec3 a_position;
    #if USE_TEXTURE
        in vec2 a_uv0;
        out vec2 v_uv0;
    #endif  
    in vec4 a_color;
    out vec4 v_color;

    void main () {
        mat4 mvp;
        #if CC_USE_MODEL
            mvp = cc_matViewProj * cc_matWorld;
        #else
            mvp = cc_matViewProj;
        #endif

        #if USE_TEXTURE
            v_uv0 = a_uv0;
        #endif

        #if USE_TINT
            // clear warning for spine
        #endif

        v_color = a_color;
        gl_Position = mvp * vec4(a_position, 1);
    }
}%
        
CCProgram fs %{
    precision highp float;
    #include <cc-global>
    #if USE_TEXTURE
        in vec2 v_uv0;
        uniform sampler2D texture;
    #endif
    in vec4 v_color;
    uniform Constant {
		vec2 uSize;
		float uIntensity;
	};
	uniform sampler2D uTex;

    
	vec4 GaussianBlur_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity) 
	{
	    vec4 sum = vec4(0);
	    vec2 offset = vec2(0.0);
	    vec2 normalizedSize = vec2(1.0 / Size);
	    offset = normalizedSize * vec2(-2.0, -2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 1.0;
	    offset = normalizedSize * vec2(-1.0, -2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(0.0, -2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 7.0;
	    offset = normalizedSize * vec2(1.0, -2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(2.0, -2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 1.0;
	    offset = normalizedSize * vec2(-2.0, -1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(-1.0, -1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 16.0;
	    offset = normalizedSize * vec2(0.0, -1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 26.0;
	    offset = normalizedSize * vec2(1.0, -1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 16.0;
	    offset = normalizedSize * vec2(2.0, -1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(-2.0, 0.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 7.0;
	    offset = normalizedSize * vec2(-1.0, 0.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 26.0;
	    offset = normalizedSize * vec2(0.0, 0.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 41.0;
	    offset = normalizedSize * vec2(1.0, 0.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 26.0;
	    offset = normalizedSize * vec2(2.0, 0.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 7.0;
	    offset = normalizedSize * vec2(-2.0, 1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(-1.0, 1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 16.0;
	    offset = normalizedSize * vec2(0.0, 1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 26.0;
	    offset = normalizedSize * vec2(1.0, 1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 16.0;
	    offset = normalizedSize * vec2(2.0, 1.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(-2.0, 2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 1.0;
	    offset = normalizedSize * vec2(-1.0, 2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(0.0, 2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 7.0;
	    offset = normalizedSize * vec2(1.0, 2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(2.0, 2.0) * Intensity;
	    sum += texture2D(Tex, UV + offset) * 1.0;               
	    return vec4((sum / 273.0).rgb, texture2D(Tex, UV).a);
	}
	void main () {
	    gl_FragColor = GaussianBlur_main(texture, v_uv0, uSize, uIntensity);
	} 
	
}%
        