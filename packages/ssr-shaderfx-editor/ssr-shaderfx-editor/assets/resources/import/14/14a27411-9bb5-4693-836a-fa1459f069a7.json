[1,0,0,[["cc.JsonAsset",["_name","json"],1]],[[0,0,1,3]],[[0,"ShapePolygon",{"name":"ShapePolygon","name_zh":"多边形","version":"1.0","fx":true,"description":{"en":"Generates a polygon shape based on input UV.","zh":"使用输入的纹理坐标，以及指定参数生成一个多边形。"},"tags":["Core","Procedural","Shape"],"input":[{"type":"vec2","name":"UV","info":{"en":"UV input value","zh":"UV 输入值"}},{"type":"float","name":"Sides","info":{"en":"Amount of side","zh":"多边形边数"}},{"type":"float","name":"Width","info":{"en":"Polygon width","zh":"多边形宽度"}},{"type":"float","name":"Height","info":{"en":"Polygon height","zh":"多边形高度"}}],"output":[{"type":"float","name":"Output"}],"uniforms":{},"frags":{},"main":["float main (vec2 UV, float Sides, float Width, float Height) {","    float pi = 3.14159265359;","    float aWidth = Width * cos(pi / Sides);","    float aHeight = Height * cos(pi / Sides);","    vec2 uv = (UV * 2.0 - 1.0) / vec2(aWidth, aHeight);","    uv.y *= -1.0;","    float pCoord = atan(uv.y, uv.x);","    float r = 2.0 * pi / Sides;","    float distance = cos(floor(0.5 + pCoord / r) * r - pCoord) * length(uv);","    #if defined GL_OES_standard_derivatives","        return clamp((1.0 - distance) / fwidth(distance), 0.0, 1.0);","    #else","        return clamp((1.0 - distance) / distance, 0.0, 1.0);","    #endif","}"]}]],0,0,[],[],[]]