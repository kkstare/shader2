[1,0,0,[["cc.JsonAsset",["_name","json"],1]],[[0,0,1,3]],[[0,"NoiseSimple",{"name":"NoiseSimple","name_zh":"简单噪声","version":"1.0","description":{"en":"Generates a simple noise based on input UV.","zh":"使用输入的纹理坐标，生成简单噪声。"},"tags":["Core","Noise","Random","Generator"],"input":[{"type":"vec2","name":"UV","info":{"en":"UV input value","zh":"UV 输入值"}},{"type":"float","name":"Scale","info":{"en":"Noise scale value","zh":"噪声缩放值"}}],"output":[{"type":"float","name":"Output"}],"uniforms":{},"frags":{"f_noise_randomValue":["float f_noise_randomValue(vec2 UV) { ","    return fract(sin(dot(UV, vec2(12.9898, 78.233)))*43758.5453); ","}"],"f_noise_interpolate":["float f_noise_interpolate(float a, float b, float t) { ","    return (1.0 - t) * a + (t * b);"," }"],"f_value_noise":["float f_value_noise(vec2 UV) { ","vec2 i = floor(UV); ","vec2 f = fract(UV); ","f = f * f * (3.0 - 2.0 * f); ","UV = abs(fract(UV) - 0.5); ","vec2 c0 = i + vec2(0.0, 0.0); ","vec2 c1 = i + vec2(1.0, 0.0); ","vec2 c2 = i + vec2(0.0, 1.0); ","vec2 c3 = i + vec2(1.0, 1.0); ","float r0 = f_noise_randomValue(c0); ","float r1 = f_noise_randomValue(c1); ","float r2 = f_noise_randomValue(c2); ","float r3 = f_noise_randomValue(c3); ","float bottomOfGrid = f_noise_interpolate(r0, r1, f.x); ","float topOfGrid = f_noise_interpolate(r2, r3, f.x); ","float t = f_noise_interpolate(bottomOfGrid, topOfGrid, f.y); ","return t; "," }"]},"main":["float main(vec2 UV, float Scale) {","   float t = 0.0;","   float freq = pow(2.0, 0.0);","   float amp = pow(0.5, 3.0);","   t += f_value_noise(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;","   freq = pow(2.0, 1.0);","   amp = pow(0.5, 2.0);","   t += f_value_noise(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;","   freq = pow(2.0, 2.0);","   amp = pow(0.5, 1.0);","   t += f_value_noise(vec2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;","   return t;","}"]}]],0,0,[],[],[]]