[1,0,0,[["cc.JsonAsset",["_name","json"],1]],[[0,0,1,3]],[[0,"NoiseGradient",{"name":"NoiseGradient","name_zh":"渐变噪声","version":"1.0","description":{"en":"Generates a gradient noise based on input UV.","zh":"使用输入的纹理坐标，生成渐变噪声。"},"tags":["Core","Noise","Random","Generator"],"input":[{"type":"vec2","name":"UV","info":{"en":"UV input value","zh":"UV 输入值"}},{"type":"float","name":"Scale","info":{"en":"Noise scale value","zh":"噪声缩放值"}}],"output":[{"type":"float","name":"Output"}],"uniforms":{},"frags":{"f_gradient_noise_dir":["vec2 f_gradient_noise_dir(vec2 p)","{","    p = mod(p, 289.0);","    float x = (34.0 * p.x + 1.0) * mod(p.x, 289.0) + p.y;","    x = mod((34.0 * x + 1.0) * x, 289.0);","    x = fract(x / 41.0) * 2.0 - 1.0;","    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));","}"]},"main":["float main(vec2 UV, float Scale) {","    vec2 p = UV * Scale;","    vec2 ip = floor(p);","    vec2 fp = fract(p);","    float d00 = dot(f_gradient_noise_dir(ip), fp);","    float d01 = dot(f_gradient_noise_dir(ip + vec2(0.0, 1.0)), fp - vec2(0.0, 1.0));","    float d10 = dot(f_gradient_noise_dir(ip + vec2(1.0, 0.0)), fp - vec2(1.0, 0.0));","    float d11 = dot(f_gradient_noise_dir(ip + vec2(1.0, 1.0)), fp - vec2(1.0, 1.0));","    fp = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);","    return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x);","}"]}]],0,0,[],[],[]]